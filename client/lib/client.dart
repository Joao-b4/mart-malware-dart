import 'dart:io';
import 'dart:async';
import 'package:client/modules/shell.dart';
import 'package:client/modules/system.dart';
import 'dart:typed_data';

Socket socket;

void connect(){
  Socket.connect("localhost", 6661).then((Socket sock) {
   socket = sock;
   socket.listen(_dataHandler, 
      onError: _errorHandler, 
      onDone: _successfulHandler, 
      cancelOnError: false);
   }).catchError((dynamic e) {
      print("Unable to connect: ${e.toString()}");
   }).then((value){
     socket.write(_getInfo());
     socket.write("\n\n=============\n[1] - Shell\n[2] - Info\n[3] - Exit\n=============\n\n==>>");
   });
    stdin.listen((data) => socket.write(new String.fromCharCodes(data).trim() + '\n\r'));
}

void _dataHandler(Uint8List data)async{
  String requestText = new String.fromCharCodes(data).trim();
  //socket.write(Shell().executableCommand(requestText));
  while(true){
    switch(requestText){
      case "1":
        Map<String, dynamic> resultMap = await Shell().executableCommand(requestText);
        if(resultMap.containsKey("error")){
          socket.write("Errors: ${resultMap["response"]}");
          socket.destroy();
          return;
        }else if(resultMap["status"] == false){
          socket.write("Problems: ${resultMap["response"]}");
          return;
        }else{
          socket.write("PID: ${resultMap["pId"]}");
          socket.write("Result: ${resultMap["response"]}");
          return;
        }
        return;
      case "2":
        socket.write(_getInfo());
        return;
      case "3":
        socket.destroy();
        return;
    }
  }

}

Map<String, dynamic> _getInfo(){
  return new System().getInfoFromSystem();
}

void _errorHandler(dynamic errorObject, StackTrace stackError)
 => print("Error -> ${errorObject.toString}");

void _successfulHandler() => print("Done Connect!");