import 'package:flutter/foundation.dart';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:mart_client_flutter/manipulate_data.dart';
import 'package:mart_client_flutter/modules.dart';

String IP = '8.tcp.ngrok.io';
int PORT =  10986;

void main() async {
  // modify with your true address/port

  runApp(MyApp());
}

class MyApp extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    final title = 'MART';
    return MaterialApp(
      title: title,
      home: MyHomePage(
        title: title,
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;

  MyHomePage({Key key, @required this.title})
      : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {

  var nbmer = 0;
  var channel ;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    Socket.connect(IP, PORT).then((Socket sock)async{
      channel = sock;
      sock.write("#" + ManipulateData.convertMapToJsonString(await Modules().getInfo(context)));
    });
    nbmer += 1;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.red,
        title: Text(widget.title),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            StreamBuilder(
              stream: channel,
              builder: (context, snapshot) {
                if(!snapshot.hasData){
                    return Padding(padding: EdgeInsets.zero);
                }

                String requestText = ManipulateData.convertCharCodesToString(snapshot.data);
                print(requestText);
                try{
                  String requestText = ManipulateData.convertCharCodesToString(snapshot.data);
                  var requestMap = ManipulateData.convertJsonToMap(requestText);
                  Modules().selectorFromMap(map: requestMap,context: context).then((value) => channel.write(value));
                }catch(err){
                  print(err);
                }


                nbmer +=1;

                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 24.0),
                  child: Text(snapshot.hasData
                      ? '${requestText}'
                      : ''),
                );
              },
            )
          ],
        ),
      ),
 // This trailing comma makes auto-formatting nicer for build methods.
    );
  }


  @override
  void dispose() {
    channel.close();
    super.dispose();
  }
}